---
import cities from "@/assets/cities.json";
import {
  getParshat,
  hebDateFormat,
  upcomingEvent,
} from "@/lib/shared/calendar";
import routes from "@/lib/shared/routes";
import { Image } from "astro:assets";
import MenuCell from "./MenuCell.astro";
import MenuItem from "./MenuItem.astro";
import Widget from "./Widget.astro";
const stringCities = Object.keys(cities);

import iconMenu from "@/images/icons/menu-icon.svg";
import iconSearch from "@/images/icons/search.png";
import imgLogoText from "@/images/logo-text.svg";
import imgLogo from "@/images/logo.svg";
import { getTranslations } from "@/lib/server/lang/lang";

const t = await getTranslations("components/header", Astro.url);
---

<MenuCell />

<header class="text-white">
  <!-- 1° RIGA -->
  <div class="w-full bg-[#031B4D]">
    <div class="chabad-container pl-2 xs:pl-4 pr-4 md:px-4 mx-auto">
      <div class="grid grid-cols-2 h-8 md:h-12">
        <!-- CELLULARE -->
        <div
          class="md:hidden flex gap-x-3 sm:gap-x-5 justify-start items-center cursor-pointer"
        >
          <div>
            <Widget icon="/images/icons/location.svg">
              <select
                data-cities-select
                class="bg-transparent border rounded-sm border-white border-opacity-40 text-white cursor-pointer w-12 sm:w-18 overflow-ellipsis uppercase xr-1 sm:pr-1"
              >
                <option selected value="">---</option>
                {
                  stringCities.map((c) => (
                    <option class="text-blue-950" value={c}>
                      {c}
                    </option>
                  ))
                }
              </select>
            </Widget>
          </div>
          <div class="xr-1">
            <Widget icon="/images/icons/candles.svg">
              <span class="hidden sm:inline">{t("dates.fri")}</span>
              <span data-shabbes-start>--:--</span>
            </Widget>
            <div class="xs:hidden -translate-y-[2px]">
              <Widget icon="/images/icons/stars.svg">
                <span class="hidden">{t("dates.sat")}</span>
                <span data-shabbes-end>--:--</span>
              </Widget>
            </div>
          </div>
          <div class="hidden xs:inline">
            <Widget icon="/images/icons/stars.svg">
              <span class="xs:hidden sm:inline">{t("dates.sat")}</span>
              <span data-shabbes-end>--:--</span>
            </Widget>
          </div>
        </div>
        <div
          class="md:hidden flex items-center justify-end gap-4 text-sm sm:text-base text-white font-montserrat"
        >
          <select class="bg-transparent" id="language-select">
            <option selected value="">Italiano</option>
          </select>
          <span>ב"ה</span>
        </div>

        <!-- DESKTOP -->
        <div
          class="hidden pr-8 md:grid grid-cols-[60px_auto] md:gap-3 lg:gap-20 xs:gap-16"
        >
          <div class="hidden md:flex items-center">
            <button
              class="w-8 aspect-square bg-white border-blue-800 rounded-full p-2"
            >
              <Image
                class="w-full h-full translate-x-px translate-y-px"
                src={iconSearch}
                alt="search icon"
              />
            </button>
          </div>

          <div class="hidden md:flex items-end font-raleway">
            <ul class="flex gap-2 text-sm">
              <MenuItem>{t("menu-items.feed")}</MenuItem>
              <MenuItem>{t("menu-items.newsletter")}</MenuItem>
              <MenuItem>{t("menu-items.login")}</MenuItem>
            </ul>
          </div>

          <!-- CELLULARE -->
          <div
            class="md:hidden flex items-center justify-end gap-4 text-xs xs:text-sm sm:text-base text-white font-montserrat"
          >
            <select class="bg-transparent mr-auto">Italiano</select>
            <span>ב"ה</span>
          </div>
        </div>

        <!-- DESKTOP -->
        <ul
          class="hidden pl-8 pb-1 md:flex items-end justify-end gap-8 text-slate-200 font-raleway text-sm"
        >
          <li class="font-bold text-white">
            <button>Italiano</button>
          </li>
          <li>
            <button>English</button>
          </li>
          <li>
            <button>עברית</button>
          </li>
          <li class="md:pl-3 lg:pl-16 text-white">ב"ה</li>
        </ul>
      </div>
    </div>
    <div
      style={{ boxShadow: "0px 0px 4px #0F60DD" }}
      class="w-full h-[2px] bg-[#3363AC]"
    >
    </div>
  </div>

  <!-- 2° RIGA -->
  <div class="relative chabad-container px-4 mx-auto">
    <!-- ELLISSE -->
    <div
      class="absolute top-0 left-1/2 -translate-y-1/2 -translate-x-1/2 -z-50"
    >
      <div
        class="w-[calc(120vw+3rem)] lg:w-[calc(170vw+3rem)] h-[calc(90vw+3rem)] lg:h-[calc(70vw+3rem)] bg-white rounded-[100%]"
      >
      </div>
    </div>

    <div
      class="absolute top-0 left-1/2 -translate-y-1/2 -translate-x-1/2 -z-50"
    >
      {
        /* <div
        style={{ boxShadow: "inset 0 0 20rem 2rem black" }}
        class="w-[120vw] h-[90vw] bg-blue-800 rounded-[100%]"></div> */
      }
      <div
        style={{
          background:
            "radial-gradient(46.4% 56.57% at 50.47% 39.48%, #00378A 0%, #002D70 37.48%, #002D70 81.75%, #001C46 96.02%)",
        }}
        class="w-[120vw] lg:w-[170vw] h-[90vw] lg:h-[70vw] rounded-[100%]"
      >
      </div>
    </div>

    <!-- GRIDROW -->
    <div
      class="grid grid-cols-[1fr_auto_1fr] gap-x-10 xs:gap-x-16 md:gap-x-10 lg:gap-x-16 items-center md:pt-6"
    >
      <!-- DESKTOP -->
      <div class="hidden md:block">
        <ul class="flex flex-wrap gap-6 gap-y-1 justify-end mb-1">
          <Widget icon="/images/icons/calendar.svg">{hebDateFormat()}</Widget>
          <Widget icon="/images/icons/book.svg">{getParshat()}</Widget>
          <Widget icon="/images/icons/event.svg">{upcomingEvent().name}</Widget>
        </ul>
      </div>

      <!-- CELLULARE -->
      <div class="flex md:hidden items-center xs:pl-4">
        <button
          class="w-8 aspect-square bg-white border-blue-800 rounded-full p-2"
        >
          <Image
            class="w-full h-full translate-y-px translate-x-px"
            src={iconSearch}
            alt="search icon"
          />
        </button>
      </div>

      <!-- LOGO -->
      <div class="mx-auto md:mx-0 md:-mt-1">
        <div class="relative pt-[15px] xs:pt-[20px] md:pt-0 pb-1 md:pb-0">
          <Image
            src={imgLogo}
            class="absolute bottom-[112%] md:translate-y-[22px] translate-y-[32px] xs:translate-y-[38px] xl:translate-y-[19px] left-1/2 -translate-x-1/2 h-[3.9rem] xs:h-[4.5rem] sm:h-[5.9] md:h-[6.5rem] xl:h-[5.7rem] pb-1"
            alt="chabad logo icon"
          />
          <span class="text-3xl font-bold font-messiri mx-auto md:mx-0">
            <Image
              src={imgLogoText}
              alt="chabad.it"
              class="min-w-full w-32 xs:w-36 sm:w-36 md:w-52 lg:w-52 xl:w-[196px]"
            />
          </span>
        </div>
      </div>

      <!-- DESKTOP -->

      <!-- TODO: aggiungere per il desktop la possibilità di vedere il testo della città mentre lo si scrive 
      (è anche un modo per far vedere all'utente che ha cliccato la barra di testo mentre si caricano le cities) -->

      <div class="hidden md:block">
        <ul class="flex flex-wrap gap-4 gap-y-1 mb-1">
          <Widget icon="/images/icons/location.svg">
            <select
              data-cities-select
              class="bg-transparent border rounded-sm border-white border-opacity-40 text-white cursor-pointer w-24 overflow-ellipsis uppercase pr-1"
            >
              <option selected value="">---</option>
              {
                stringCities.map((c) => (
                  <option class="text-blue-950" value={c}>
                    {c}
                  </option>
                ))
              }
            </select>
          </Widget>
          <Widget icon="/images/icons/candles.svg">
            {t("dates.fri")}
            <span data-shabbes-start>--:--</span>
          </Widget>
          <Widget icon="/images/icons/stars.svg">
            {t("dates.sat")}
            <span data-shabbes-end>--:--</span>
          </Widget>
        </ul>
      </div>

      <!-- CELLULARE -->
      <div
        data-sidebar-toggle
        class="md:hidden flex h-7 ml-auto xs:mr-4 items-center justify-end"
      >
        <Image src={iconMenu} alt="hamburger menu" />
      </div>
    </div>
  </div>

  <!-- NAVBAR -->
  <div class="bg-slate-100 border-y border-blue-950 py-1 md:py-2 xl:mt-1">
    <nav class="chabad-container mx-auto">
      <ul
        class="flex justify-center gap-5 xs:gap-8 lg:gap-14 text-base md:text-lg lg:text-xl text-blue-950 font-semibold font-montserrat translate-y-px uppercase"
      >
        <li class="md:hidden">
          <a href={routes.live} class="text-red-800">live</a>
        </li>
        <li><a href={routes.news}>{t("navbar.news")}</a></li>
        <li><a href={routes.articles}>{t("navbar.articles")}</a></li>
        <li class="hidden sm:block">
          <a href={routes.live}>{t("navbar.video-live")}</a>
        </li>
        <li class="hidden md:block">
          <a href={routes.organizations()}>{t("navbar.organizations")}</a>
        </li>
        <!-- <li class="hidden xs:block">
          <a href={routes.about}>{t("navbar.about-us")}</a>
        </li> -->
        <!-- <li class="hidden md:block">
          <a href={routes.resources}>{t("navbar.resources")}</a>
        </li> -->
        <!-- <li class="hidden md:block">
        <a href={routes.contacts}>{t("navbar.contacts")}</a>
      </li> -->
        <li class="hidden md:block">
          <a href={routes.contribute}>{t("navbar.contributes")}</a>
        </li>
      </ul>
    </nav>
  </div>

  <style>
    .custom-scrollbar::-webkit-scrollbar {
      width: 1px;
      height: 3px;
    }

    .custom-scrollbar::-webkit-scrollbar-thumb {
      background-color: #0f60dd;
      border-radius: 2px;
    }
  </style>
</header>

<script>
  const select = document.querySelectorAll<HTMLSelectElement>(
    "[data-cities-select]"
  );
  const shabbesStart = document.querySelectorAll("[data-shabbes-start]");
  const shabbesEnd = document.querySelectorAll("[data-shabbes-end]");

  window.addEventListener("load", (event) => {
    const currItem = localStorage.getItem("halachic-times-location");
    if (currItem) {
      select.forEach((s) => {
        s.value = currItem;
        fetchCandles(s, ({ start, end }) => {
          shabbesStart.forEach(
            (ss) => (ss.textContent = formatTime(new Date(start)))
          );
          shabbesEnd.forEach(
            (se) => (se.textContent = formatTime(new Date(end)))
          );
        });
      });
    }

    select.forEach((s) => {
      s.addEventListener("change", () => {
        select.forEach((s) => (s.disabled = true));

        if (!s.value) {
          shabbesStart.forEach((ss) => (ss.textContent = "--:--"));
          shabbesEnd.forEach((se) => (se.textContent = "--:--"));
          localStorage.removeItem("halachic-times-location");
          select.forEach((s) => (s.disabled = false));
          return;
        }

        localStorage.setItem("halachic-times-location", s.value);

        fetchCandles(s, (data) => {
          select.forEach((s) => (s.disabled = false));
          if (!data) return;
          const { start, end } = data;
          shabbesStart.forEach(
            (ss) => (ss.textContent = formatTime(new Date(start)))
          );
          shabbesEnd.forEach(
            (se) => (se.textContent = formatTime(new Date(end)))
          );
        });
      });
    });
  });

  function formatTime(date: Date) {
    return (
      String(date.getHours()).padStart(2, "0") +
      ":" +
      String(date.getMinutes()).padStart(2, "0")
    );
  }

  function fetchCandles(sel: HTMLSelectElement, cb: Function) {
    fetch("/api/calendar/candles", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        city: sel.value,
      }),
    })
      .then((res) => res.json())
      .catch(() => cb(null))
      .then((data) => cb(data));
  }

  (() => {
    document.querySelectorAll("[data-sidebar-toggle]").forEach((t) => {
      t.addEventListener("click", () => {
        // disable scroll
        document.documentElement.classList.toggle("max-md:overflow-hidden");
        // toggle sidebar
        document
          .querySelector("#menu-cell")
          ?.classList?.toggle("translate-x-full");
      });
    });
  })();
</script>
