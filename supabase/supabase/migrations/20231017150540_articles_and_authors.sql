/* ENUM */
CREATE TYPE "public"."article_category" AS enum(
  'torah',
  'family'
);

CREATE TYPE "public"."scraper_website" AS enum(
  'it-chabad'
);


/* TABLES */
CREATE TABLE public.articles(
  id bigint GENERATED BY DEFAULT AS IDENTITY,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  title text NOT NULL,
  content text NOT NULL,
  date timestamp with time zone NOT NULL DEFAULT now(),
  image text NOT NULL,
  preview text NOT NULL,
  category public.article_category NOT NULL,
  draft boolean NOT NULL DEFAULT TRUE,
  slug text NOT NULL,
  CONSTRAINT articles_pkey PRIMARY KEY (id),
  CONSTRAINT articles_slug_key UNIQUE (slug)
)
TABLESPACE pg_default;

ALTER TABLE "public"."articles" ENABLE ROW LEVEL SECURITY;

CREATE TABLE public.authors(
  user_id uuid NOT NULL DEFAULT auth.uid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  name text NULL,
  CONSTRAINT author_pkey PRIMARY KEY (user_id)
)
TABLESPACE pg_default;

ALTER TABLE "public"."authors" ENABLE ROW LEVEL SECURITY;

CREATE TABLE public.scraped(
  id bigint GENERATED BY DEFAULT AS IDENTITY,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  title text NOT NULL,
  url text NOT NULL,
  image text NULL,
  source public.scraper_website NOT NULL,
  CONSTRAINT scraped_pkey PRIMARY KEY (id),
  CONSTRAINT unique_url UNIQUE (url)
)
TABLESPACE pg_default;

ALTER TABLE "public"."scraped" ENABLE ROW LEVEL SECURITY;


/* POLICIES */
CREATE POLICY "Authors can edit articles" ON "public"."articles" AS permissive
  FOR ALL TO authenticated
    USING ((EXISTS (
      SELECT
        1
      FROM
        authors
      WHERE (authors.user_id = auth.uid()))));

CREATE POLICY "Enable view non drafts" ON "public"."articles" AS permissive
  FOR SELECT TO public
    USING ((draft = FALSE));

CREATE POLICY "Authors can edit their own profile" ON "public"."authors" AS permissive
  FOR ALL TO authenticated
    USING ((user_id = auth.uid()));

CREATE POLICY "Enable read access for all users" ON "public"."scraped" AS permissive
  FOR SELECT TO public
    USING (TRUE);


/* FUNCTIONS */
SET check_function_bodies = OFF;

CREATE OR REPLACE FUNCTION public.enum_values(name text)
  RETURNS SETOF text
  LANGUAGE sql
  AS $function$
  SELECT
    e.enumlabel
  FROM
    pg_enum e
    JOIN pg_type t ON e.enumtypid = t.oid
  WHERE
    t.typname = name;
$function$;

