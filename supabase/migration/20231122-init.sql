BEGIN;



CREATE TYPE article_category AS ENUM ('torah', 'family');
CREATE TYPE contacts_key AS ENUM ('telephone', 'email', 'iban', 'facebook', 'instagram', 'tiktok', 'youtube', 'twitter', 'linkedin');
CREATE TYPE scraper_website AS ENUM ('it-chabad');
CREATE TYPE video_live_category AS ENUM ('video', 'live');
CREATE TYPE news_category AS ENUM ('mazaltov', 'comunità', 'politica', 'società');




create table
  public.authors (
    user_id uuid not null default auth.uid (),
    created_at timestamp with time zone not null default now(),
    name text null,
    constraint author_pkey primary key (user_id)
  ) tablespace pg_default;

ALTER TABLE authors ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Authors can edit their own profile" ON "public"."authors" USING (user_id = auth.uid());




create table
  public.articles (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    title text not null,
    content text not null,
    date timestamp with time zone not null default now(),
    image text not null,
    preview text not null,
    category public.article_category not null,
    draft boolean not null default true,
    slug text not null,
    constraint articles_pkey primary key (id),
    constraint articles_slug_key unique (slug)
  ) tablespace pg_default;

ALTER TABLE articles ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Authors can edit articles" ON "public"."articles" USING ((EXISTS ( SELECT 1 FROM authors WHERE (authors.user_id = auth.uid()))));
create POLICY "Enable read access non drafts for all users" ON "public"."articles" USING (draft = false);




create table
  public.organizations (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    name text not null,
    city text not null,
    address text not null,
    website text null,
    main_image text null,
    content text null,
    slug text not null default ''::text,
    link_donate text null,
    slogan text null,
    markdown text not null,
    constraint Organizations_pkey primary key (id)
  ) tablespace pg_default;

ALTER TABLE organizations ENABLE ROW LEVEL SECURITY;

create POLICY "Enable read access for all users" ON "public"."organizations" USING (true);




create table
  public.events (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    name text not null,
    markdown text null,
    main_image text null,
    slug text not null,
    date date null,
    city text not null,
    constraint events_pkey primary key (id),
    constraint events_slug_key unique (slug)
  ) tablespace pg_default;

ALTER TABLE events ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Enable read access for all users" ON "public"."events" USING (true);




create table
  public.events_organizations (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    id_organization bigint not null,
    id_event bigint not null,
    constraint relation_events_organizations_pkey primary key (id),
    constraint events_organizations_id_organization_fkey foreign key (id_organization) references organizations (id),
    constraint events_organizations_id_event_fkey foreign key (id_event) references events (id)
  ) tablespace pg_default;

ALTER TABLE events_organizations ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Enable read access for all users" ON "public"."events_organizations" USING (true);




create table
  public.contacts (
    created_at timestamp with time zone not null default now(),
    id bigint generated by default as identity,
    id_organization bigint null,
    key public.contacts_key not null,
    value text not null,
    id_event bigint null,
    constraint organization_contacts_pkey primary key (id),
    constraint organization_contacts_id_key unique (id),
    constraint contacts_id_organization_fkey foreign key (id_organization) references organizations (id),
    constraint contacts_id_event_fkey foreign key (id_event) references events (id),
    constraint chk_organization_or_event check (((id_organization is null) <> (id_event is null)))
  ) tablespace pg_default;

ALTER TABLE contacts ENABLE ROW LEVEL SECURITY;

create POLICY "Enable read access for all users" ON "public"."contacts" USING (true);




create table
  public.responsibles (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    name text not null,
    id_organization bigint null,
    email text not null,
    telephone text null,
    constraint responsibles_pkey primary key (id),
    constraint responsibles_id_organization_fkey foreign key (id_organization) references organizations (id)
  ) tablespace pg_default;

ALTER TABLE responsibles ENABLE ROW LEVEL SECURITY;

create POLICY "Enable read access for all users" ON "public"."responsibles" USING (true);




create table
  public.live_video (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    title text not null,
    date timestamp with time zone not null default now(),
    responsible bigint null,
    youtube_link text not null,
    category public.video_live_category not null,
    slug text not null,
    constraint live_video_pkey primary key (id),
    constraint live_video_responsible_fkey foreign key (responsible) references responsibles (id)
  ) tablespace pg_default;

ALTER TABLE live_video ENABLE ROW LEVEL SECURITY;

CREATE POLICY "everyone can select" ON "public"."live_video" USING (true);





create table
  public.live_responsibles (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    id_responsible bigint null,
    id_live bigint null,
    constraint live_responsibles_pkey primary key (id),
    constraint live_responsibles_id_live_fkey foreign key (id_live) references live_video (id),
    constraint live_responsibles_id_responsible_fkey foreign key (id_responsible) references responsibles (id)
  ) tablespace pg_default;

ALTER TABLE live_responsibles ENABLE ROW LEVEL SECURITY;

create POLICY "Enable read access for all users" ON "public"."live_responsibles" USING (true);




create table
  public.news (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    title text not null,
    content text not null,
    date timestamp with time zone not null default now(),
    image text not null,
    preview text not null,
    draft boolean not null default true,
    slug text not null,
    category public.news_category null,
    constraint news_pkey primary key (id),
    constraint news_title_key unique (title),
    constraint news_slug_key unique (slug)
  ) tablespace pg_default;

ALTER TABLE news ENABLE ROW LEVEL SECURITY;

create POLICY "everyone can view non draft news" ON "public"."news" USING (draft = false);




create table
  public.scraped (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    title text not null,
    url text not null,
    image text null,
    source public.scraper_website not null,
    constraint scraped_pkey primary key (id),
    constraint unique_url unique (url)
  ) tablespace pg_default;

ALTER TABLE scraped ENABLE ROW LEVEL SECURITY;

create POLICY "Enable read access for all users" ON "public"."scraped" USING (true);




CREATE OR REPLACE FUNCTION public.enum_values(name text)
 RETURNS SETOF text
 LANGUAGE sql
AS $function$
  SELECT
    e.enumlabel
  FROM
    pg_enum e
    JOIN pg_type t ON e.enumtypid = t.oid
  WHERE
    t.typname = name;
$function$




CREATE OR REPLACE FUNCTION public.events_with_organizations(limitation bigint)
 RETURNS TABLE(e_id bigint, e_created_at timestamp without time zone, e_name text, e_markdown text, e_main_image text, e_slug text, o_id bigint, o_name text)
 LANGUAGE sql
AS $function$
  select
    e.id as e_id, e.created_at as e_created_at, e.name as e_name, e.markdown as e_markdown, e.main_image as e_main_image, e.slug as e_slug,
    o.id as o_id, o.name as o_name
  from events_organizations eo
  join events e on eo.id_event = e.id
  join organizations o on eo.id_organization = o.id
  where eo.id_event in (select id from events limit limitation);
$function$




COMMIT;